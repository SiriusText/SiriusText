grammar org.obeonetwork.sirius.text.SiriusTextDsl hidden (WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate siriusTextDsl "http://www.obeonetwork.org/sirius/text/SiriusTextDsl"

SiriusFile:
	(documentation=DOCUMENTATION)?
	'package' name=QualifiedName
	(imports+=Import)*
	body=SiriusFileBody
;

SiriusFileBody:
	Designer | Representation | Layer | Mapping | Style | Palette | Edge | Section | Tool
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Import:
  'import' importedNamespace=QualifiedNameWithWildcard
;

Designer:
	(documentation=DOCUMENTATION)?
	'designer' name=ID ('as' label=STRING)? '{'
		(viewpoints+=Viewpoint)*
	'}'
;

Viewpoint:
	(documentation=DOCUMENTATION)?
	('@IconPath(' iconPath=STRING ')')?
	'viewpoint' name=ID ('as' label=STRING)? '{'
		('modelFileExtensions' '=' '[' modelFileExtensions+=STRING (',' modelFileExtensions+=STRING)*']')?
		('representations' '=' '[' (representations+=[Representation | QualifiedName] (',' representations+=[Representation | QualifiedName])*)? ']')?
		('javaExtensions' '=' '[' (javaExtension+=[jvmTypes::JvmType|QualifiedName] (',' javaExtension+=[jvmTypes::JvmType|QualifiedName])*)? ']')?
	'}'
;

Representation:
	Diagram
;

Diagram:
	(documentation=DOCUMENTATION)?
	(initialized ?= '@Initialized')?
	(showOnStartup ?= '@ShowOnStartup')?
	(enablePopupBars ?= '@EnablePopupBars')?
	('@MetamodelUris'+'({'
		metamodelUris+=STRING (',' metamodelUris+=STRING)*
	'})')?
	'diagram' name=ID ('as' label=STRING)? 'for' domainClass=STRING ('?' preconditionExpression=EXPRESSION)? '{'
		('documentation' '=' endUserDocumentation=STRING)?
		('titleExpression' '=' titleExpression=EXPRESSION)?
		('rootExpression' '=' rootExpression=EXPRESSION)?
		('defaultLayer' '=' defaultLayer=[Layer | QualifiedName])?
		('additionalLayers' '=' '[' 
			(additionalLayers+=[Layer | QualifiedName] (',' additionalLayers+=[Layer | QualifiedName])*)?
		']')?
	'}'
;

Layer:
	(documentation=DOCUMENTATION)?
	('@IconPath(' iconPath=STRING ')')?
	'layer' name=ID '{'
		('mappings' '=' '['
			(mappings+=[Mapping | QualifiedName] (',' mappings+=[Mapping | QualifiedName])*)?
		']')?
		('edges' '=' '['
			(edges+=[Edge | QualifiedName] (',' edges+=[Edge | QualifiedName])*)?
		']')?
		('sections' '=' '['
			(sections+=[Section | QualifiedName] (',' sections+=[Section | QualifiedName])*)?
		']')?
	'}'
;

Section:
	(documentation=DOCUMENTATION)?
	('@IconPath(' iconPath=STRING ')')?
	'section' name=ID ('as' label=STRING)? '{'
		('tools' '=' '['
			(tools+=[Tool | QualifiedName] (',' tools+=[Tool | QualifiedName])*)?
		']')?
	'}'	
;

Tool:
	ContainerCreation
;

ContainerCreation:
	(documentation=DOCUMENTATION)?
	(forceRefresh?='@ForceRefresh')?
	('@IconPath(' iconPath=STRING ')')?
	'@NodeCreationVariable' '('nodeCreationVariable=STRING')'
	'@ContainerViewVariable' '('containerViewVariable=STRING')'
	'containerCreation' name=ID ('as' label=STRING)? ('?' preconditionExpression=EXPRESSION)? '{'
		'containerMappings' '=' '['
			(containerMappings+=[Mapping | QualifiedName] (',' containerMappings+=[Mapping | QualifiedName])*)?
		']'
		('extraMappings' '=' '['
			(extraMappings+=[Mapping | QualifiedName] (',' extraMappings+=[Mapping | QualifiedName])*)?
		']')?
		'begin' '{'
			(body=Operation)?
		'}'
	'}'
;

Operation:
	ChangeContext | For | If | Set | CreateInstance | CreateView | Unset | CreateEdgeView | DeleteView | Remove | Move | Switch
;

ChangeContext:
	'changeContext' '(' browseExpression=EXPRESSION ')' ( '{'
		(body+=Operation)*
	'}')?
;

For:
	'for' '('iteratorName=STRING ':' expression=EXPRESSION ')' '{'
		(body+=Operation)*
	'}'
;

If:
	'if' '(' conditionExpression=EXPRESSION ')' '{'
		(body+=Operation)*
	'}'
;

Set:
	'set' '(' 'featureName' ':' featureName=STRING ',' 'valueExpression' ':' valueExpression=EXPRESSION ')' ('{'
		(body+=Operation)*
	'}')?
;

Unset:
	'unset' '(' 'featureName' ':' featureName=STRING (',' 'elementExpression' ':' elementExpression=EXPRESSION)? ')' ('{'
		(body+=Operation)*
	'}')?
;

CreateInstance:
	'createInstance' '(' 'referenceName' ':' referenceName=STRING ',' 'type' ':' type=STRING ')' 'as' variableName=STRING ('{'
		(body+=Operation)*
	'}')?
;

CreateView:
	'createView' '(' 'mapping' ':' mapping=[Mapping | QualifiedName] ',' 'containerViewExpression' ':' containerViewExpression=EXPRESSION ')' 'as' variableName=STRING ('{'
		(body+=Operation)*
	'}')?
;

CreateEdgeView:
	'createEdgeView' '(' 'mapping' ':' edge=[Edge | QualifiedName] ',' 'sourceExpression' ':' sourceExpression=EXPRESSION ',' 'targetExpression' ':' targetExpression=EXPRESSION ',' 'containerViewExpression' ':' containerViewExpression=EXPRESSION ')' 'as' variableName=STRING ('{'
		(body+=Operation)*
	'}')?
;

DeleteView:
	{DeleteView}
	'deleteView''()' ('{'
		(body+=Operation)*
	'}')?
;

Remove:
	{Remove}
	'remove''()' ('{'
		(body+=Operation)*
	'}')?
;

Move:
	'move' '(' 'newContainerExpression' ':' newContainerExpression=EXPRESSION ',' 'featureName' ':' featureName=STRING ')' ('{'
		(body+=Operation)*
	'}')?
;

Switch:
	'switch' '{'
		(cases+=Case)+
		(default=Default)?
	'}'
;

Case:
	'case' '(' conditionExpression=EXPRESSION ')' '{'
		(body+=Operation)*
	'}'
;

Default:
	{Default}
	'default' '{'
		(body+=Operation)*
	'}'
;

Mapping:
	Container | Node
;

Node:
	(documentation=DOCUMENTATION)?
	'node' name=ID ('as' label=STRING)? 'for' domainClass=STRING 'style' style=[NodeStyle | QualifiedName] ('?' preconditionExpression=EXPRESSION)? '{'
		('semanticCandidatesExpression' '=' semanticCandidatesExpression=EXPRESSION)?
		('associatedElementsExpression' '=' associatedElementsExpression=EXPRESSION)?
		(conditionalStyles+=ConditionalNodeStyleDeclaration)*
	'}'
;

Container:
	(documentation=DOCUMENTATION)?
	'container' (childrenPresentation=ContainerChildrenPresentation)? name=ID ('as' label=STRING)? 'for' domainClass=STRING 'style' style=[ContainerStyle | QualifiedName] ('?' preconditionExpression=EXPRESSION)? '{'
		('semanticCandidatesExpression' '=' semanticCandidatesExpression=EXPRESSION)?
		('associatedElementsExpression' '=' associatedElementsExpression=EXPRESSION)?
		(conditionalStyles+=ConditionalContainerStyleDeclaration)*
	'}'
;

enum ContainerChildrenPresentation:
	freeForm | list | horizontalStack | verticalStack
;

ConditionalNodeStyleDeclaration:
	'style' style=[NodeStyle | QualifiedName] 'if' conditionalStyleExpression=EXPRESSION 
;

ConditionalContainerStyleDeclaration:
	'style' style=[ContainerStyle | QualifiedName] 'if' conditionalStyleExpression=EXPRESSION 
;

Style:
	ContainerStyle | EdgeStyle | NodeStyle
;

NodeStyle:
	Square
;

Square:
	(documentation=DOCUMENTATION)?
	(allowVerticalResizing?='@AllowVerticalResizing')?
	(allowHorizontalResizing?='@AllowHorizontalResizing')?
	'square' name=ID 'in' color=[Color | QualifiedName] '{'
		(label=Label)?
		('labelBorderStyle' '=' labelBorderStyle=NodeLabelBorderStyle)?
		(border=Border)?
		('height' '=' height=INT)?
		('width' '=' width=INT)?
		('sizeComputationExpression' '=' sizeComputationExpression=EXPRESSION)?
		('tooltipExpression' '=' tooltipExpression=EXPRESSION)?
	'}'
;

Label:
	(showIcon?='@ShowIcon')?
	(hideByDefault?='@HideByDefault')?
	('@IconPath(' iconPath=STRING ')')?
	'label' (formatOptions+=LabelFormatOption)* (alignment=LabelAlignment)? ('size' '=' size=INT)? expression=EXPRESSION 'in' color=[Color | QualifiedName]
;

enum NodeLabelBorderStyle:
	node | border
;

enum LabelFormatOption:
	bold | italic | underline | strikethrought
;

enum LabelAlignment:
	left | center | right
;

Border:
	'border' lineStyle=LineStyle 'size' '=' borderSizeComputationExpression=EXPRESSION 'in' borderColor=[Color | QualifiedName]
;

ContainerStyle:
	Gradient
;

Gradient:
	(documentation=DOCUMENTATION)?
	'gradient' direction=GradientDirection name=ID 'from' backgroundColor=[Color | QualifiedName] 'to' foregroundColor=[Color | QualifiedName] '{'
		(label=Label)?
		('labelBorderStyle' '=' labelBorderStyle=ContainerLabelBorderStyle)?
		(border=Border)?
		('heightComputationExpression' '=' heightComputationExpression=EXPRESSION)?
		('widthComputationExpression' '=' widthComputationExpression=EXPRESSION)?
		('arcHeight' '=' arcHeight=INT)?
		('arcWidth' '=' arcWidth=INT)?
		('tooltipExpression' '=' tooltipExpression=EXPRESSION)?
	'}'
;

enum ContainerLabelBorderStyle:
	labelBorderStyleWithBeveledCorner | labelBorderForContainer | noLabelBorderForList
;

enum GradientDirection:
	oblique | lefttoright | toptobottom
;

Edge:
	RelationBasedEdge
;

RelationBasedEdge:
	(documentation=DOCUMENTATION)?
	'relationBasedEdge' name=ID ('as' label=STRING)? 'style' style=[EdgeStyle | QualifiedName] ('?' preconditionExpression=EXPRESSION)? '{'
		'sourceMappings' '=' '['
			(sourceMappings+=[Mapping | QualifiedName] (',' sourceMappings+=[Mapping | QualifiedName])*)?
		']'
		'targetMappings' '=' '['
			(targetMappings+=[Mapping | QualifiedName] (',' targetMappings+=[Mapping | QualifiedName])*)?
		']'
		'targetFinderExpression' '=' targetFinderExpression=EXPRESSION
	'}'
;

EdgeStyle:
	'edgeStyle' name=ID 'in' strokeColor=[Color | QualifiedName] ('line' '=' lineStyle=LineStyle)? ('routing' '=' routingStyle=RoutingStyle)? '{'
		(label=EdgeLabel)?
		('sourceArrow' '=' sourceArrow=ArrowDecorator)?
		('targetArrow' '=' targetArrow=ArrowDecorator)?
		('sizeComputationExpression' '=' sizeComputationExpression=EXPRESSION)?
		('foldingStyle' '=' foldingStyle=FoldingStyle)?
		('endsCentering' '=' endsCentering=EndsCentering)?
	'}'
;

enum LineStyle:
	solid | dash | dot | dash_dot
;

enum RoutingStyle:
	straight | manhattan | tree
;

enum ArrowDecorator:
	NoDecoration | OutputArrow | InputArrow | OutputClosedArrow | InputClosedArrow | OutputFillClosedArrow | InputFillClosedArrow | Diamond | FillDiamond | InputArrowWithDiamond | InputArrowWithFillDiamond
;

enum FoldingStyle:
	none | source | target
;

enum EndsCentering:
	none | both | source | target
;

EdgeLabel:
	(showIcon?='@ShowIcon')?
	('@IconPath(' iconPath=STRING ')')?
	'label' (formatOptions+=LabelFormatOption)* ('size' '=' size=INT)? expression=EXPRESSION 'in' color=[Color | QualifiedName]
;

Palette:
	(documentation=DOCUMENTATION)?
	'palette' name=ID '{'
		(colors+=Color)*
	'}'
;

Color:
	'color' name=ID '=' value=ColorValue 
;

ColorValue:
	RGB
;

RGB:
	'rgb''(' red=INT ',' green=INT ',' blue=INT ')'
;

terminal DOCUMENTATION: '/**' -> '*/';

terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING	: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

terminal EXPRESSION : '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS	: (' '|'\t'|'\r'|'\n')+;