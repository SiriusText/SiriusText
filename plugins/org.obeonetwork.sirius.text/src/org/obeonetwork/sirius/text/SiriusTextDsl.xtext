grammar org.obeonetwork.sirius.text.SiriusTextDsl hidden (WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate siriusTextDsl "http://www.obeonetwork.org/sirius/text/SiriusTextDsl"

SiriusFile:
	(documentation=DOCUMENTATION)?
	'package' name=QualifiedName
	(imports+=Import)*
	body=SiriusFileBody
;

SiriusFileBody:
	Designer | Representation | Layer | Mapping | Style | Palette
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Import:
  'import' importedNamespace=QualifiedNameWithWildcard
;

Designer:
	(documentation=DOCUMENTATION)?
	'designer' name=ID ('as' label=STRING)? '{'
		(viewpoints+=Viewpoint)*
	'}'
;

Viewpoint:
	(documentation=DOCUMENTATION)?
	'viewpoint' name=ID ('as' label=STRING)? '{'
		('modelFileExtensions' '=' '[' modelFileExtensions+=STRING (',' modelFileExtensions+=STRING)*']')?
		('icon' '=' icon=STRING)?
		('representations' '=' '[' (representations+=[Representation | QualifiedName] (',' representations+=[Representation | QualifiedName])*)? ']')?
	'}'
;

Representation:
	Diagram
;

Diagram:
	(documentation=DOCUMENTATION)?
	(initialized ?= '@Initialized')?
	(showOnStartup ?= '@ShowOnStartup')?
	(enablePopupBars ?= '@EnablePopupBars')?
	'@MetamodelUris'+'({'
		metamodelUris+=STRING (',' metamodelUris+=STRING)*
	'})'
	'diagram' name=ID ('as' label=STRING)? 'for' domainClass=STRING ('?' precondition=EXPRESSION)? '{'
		('documentation' '=' endUserDocumentation=STRING)?
		('titleExpression' '=' titleExpression=EXPRESSION)?
		('rootExpression' '=' rootExpression=EXPRESSION)?
		('defaultLayer' '=' defaultLayer=[Layer | QualifiedName])?
		('additionalLayers' '=' '[' 
			(additionalLayers+=[Layer | QualifiedName] (',' additionalLayers+=[Layer | QualifiedName])*)?
		']')?
	'}'
;

Layer:
	(documentation=DOCUMENTATION)?
	'layer' name=ID '{'
		('icon' '=' icon=STRING)?
		'mappings' '=' '['
			(mappings+=[Mapping | QualifiedName] (',' mappings+=[Mapping | QualifiedName])*)?
		']'
		'edges' '=' '['']'
	'}'
;

Mapping:
	Container
;

Container:
	(documentation=DOCUMENTATION)?
	(list ?= 'list')? 'container' name=ID ('as' label=STRING)? 'for' domainClass=STRING 'style' style+=[ContainerStyle | QualifiedName] ('?' precondition=EXPRESSION)? '{'
		('semanticCandidatesExpression' '=' semanticCanditatesExpression=EXPRESSION)?
		(conditionalStyles+=ConditionalContainerStyleDeclaration)*
	'}'
;

ConditionalContainerStyleDeclaration:
	'style' style=[ContainerStyle | QualifiedName] 'if' conditionalStyleExpression=EXPRESSION 
;

Style:
	ContainerStyle
;

ContainerStyle:
	Gradient
;

Gradient:
	(documentation=DOCUMENTATION)?
	'gradient' direction=GradientDirection name=ID 'from' backgroundColor=[Color | QualifiedName] 'to' foregroundColor=[Color | QualifiedName] '{'
		('label' position=LabelPosition labelExpression=EXPRESSION 'in' labelColor=[Color | QualifiedName] )?
		('border''size' '=' borderSize=INT 'in' borderColor=[Color | QualifiedName])?
		('icon' '=' icon=STRING)?
		('height' '=' height=INT)?
		('width' '=' width=INT)?
		
	'}'
;

enum LabelPosition:
	left | center | right
;

Palette:
	(documentation=DOCUMENTATION)?
	'palette' name=ID '{'
		(colors+=Color)*
	'}'
;

Color:
	'color' name=ID '=' value=STRING 
;

enum GradientDirection:
	oblique | lefttoright | toptobottom
;

terminal DOCUMENTATION: '/**' -> '*/';

terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING	: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

terminal EXPRESSION : '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal WS	: (' '|'\t'|'\r'|'\n')+;