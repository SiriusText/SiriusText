grammar org.obeonetwork.sirius.text.SiriusTextDsl hidden (WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate siriusTextDsl "http://www.obeonetwork.org/sirius/text/SiriusTextDsl"

SiriusFile:
	(documentation=DOCUMENTATION)?
	'package' name=QualifiedName
	(imports+=Import)*
	body=SiriusFileBody
;

SiriusFileBody:
	Designer | Representation | Layer | Mapping | Style | Palette | Edge
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Import:
  'import' importedNamespace=QualifiedNameWithWildcard
;

Designer:
	(documentation=DOCUMENTATION)?
	'designer' name=ID ('as' label=STRING)? '{'
		(viewpoints+=Viewpoint)*
	'}'
;

Viewpoint:
	(documentation=DOCUMENTATION)?
	'viewpoint' name=ID ('as' label=STRING)? '{'
		('modelFileExtensions' '=' '[' modelFileExtensions+=STRING (',' modelFileExtensions+=STRING)*']')?
		('icon' '=' icon=STRING)?
		('representations' '=' '[' (representations+=[Representation | QualifiedName] (',' representations+=[Representation | QualifiedName])*)? ']')?
	'}'
;

Representation:
	Diagram
;

Diagram:
	(documentation=DOCUMENTATION)?
	(initialized ?= '@Initialized')?
	(showOnStartup ?= '@ShowOnStartup')?
	(enablePopupBars ?= '@EnablePopupBars')?
	'@MetamodelUris'+'({'
		metamodelUris+=STRING (',' metamodelUris+=STRING)*
	'})'
	'diagram' name=ID ('as' label=STRING)? 'for' domainClass=STRING ('?' precondition=EXPRESSION)? '{'
		('documentation' '=' endUserDocumentation=STRING)?
		('titleExpression' '=' titleExpression=EXPRESSION)?
		('rootExpression' '=' rootExpression=EXPRESSION)?
		('defaultLayer' '=' defaultLayer=[Layer | QualifiedName])?
		('additionalLayers' '=' '[' 
			(additionalLayers+=[Layer | QualifiedName] (',' additionalLayers+=[Layer | QualifiedName])*)?
		']')?
	'}'
;

Layer:
	(documentation=DOCUMENTATION)?
	'layer' name=ID '{'
		('icon' '=' icon=STRING)?
		'mappings' '=' '['
			(mappings+=[Mapping | QualifiedName] (',' mappings+=[Mapping | QualifiedName])*)?
		']'
		'edges' '=' '['
			(edges+=[Edge | QualifiedName] (',' edges+=[Edge | QualifiedName])*)?
		']'
	'}'
;

Mapping:
	Container
;

Container:
	(documentation=DOCUMENTATION)?
	(list ?= 'list')? 'container' name=ID ('as' label=STRING)? 'for' domainClass=STRING 'style' style=[ContainerStyle | QualifiedName] ('?' precondition=EXPRESSION)? '{'
		('semanticCandidatesExpression' '=' semanticCanditatesExpression=EXPRESSION)?
		(conditionalStyles+=ConditionalContainerStyleDeclaration)*
	'}'
;

ConditionalContainerStyleDeclaration:
	'style' style=[ContainerStyle | QualifiedName] 'if' conditionalStyleExpression=EXPRESSION 
;

Style:
	ContainerStyle | EdgeStyle
;

ContainerStyle:
	Gradient
;

Gradient:
	(documentation=DOCUMENTATION)?
	'gradient' direction=GradientDirection name=ID 'from' backgroundColor=[Color | QualifiedName] 'to' foregroundColor=[Color | QualifiedName] '{'
		('label' labelAlignment=LabelAlignment labelExpression=EXPRESSION 'in' labelColor=[Color | QualifiedName] )?
		('border''size' '=' borderSize=INT 'in' borderColor=[Color | QualifiedName])?
		('icon' '=' icon=STRING)?
		('heightComputationExpression' '=' heightComputationExpression=EXPRESSION)?
		('widthComputationExpression' '=' widthComputationExpression=EXPRESSION)?
		
	'}'
;

enum LabelAlignment:
	left | center | right
;

enum GradientDirection:
	oblique | lefttoright | toptobottom
;

Edge:
	RelationBasedEdge
;

RelationBasedEdge:
	(documentation=DOCUMENTATION)?
	'relationBasedEdge' name=ID ('as' label=STRING)? 'style' style=[EdgeStyle | QualifiedName] '{'
		'sourceMappings' '=' '['
			(sourceMappings+=[Mapping | QualifiedName] (',' sourceMappings+=[Mapping | QualifiedName])*)?
		']'
		'targetMappings' '=' '['
			(targetMappings+=[Mapping | QualifiedName] (',' targetMappings+=[Mapping | QualifiedName])*)?
		']'
		'targetFileExpression' '=' targetFinderExpression=EXPRESSION
	'}'
;

EdgeStyle:
	'edgeStyle' name=ID 'in' strokeColor=[Color | QualifiedName] ('line' '=' lineStyle=LineStyle)? ('routing' '=' routingStyle=RoutingStyle)? '{'
		('sourceArrow' '=' sourceArrow=ArrowDecorator)?
		('targetArrow' '=' targetArrow=ArrowDecorator)?
		('sizeComputationExpression' '=' sizeComputationExpression=EXPRESSION)?
		('foldingStyle' '=' foldingStyle=FoldingStyle)?
		('endsCentering' '=' endsCentering=EndsCentering)?
	'}'
;

enum LineStyle:
	solid | dash | dot | dash_dot
;

enum RoutingStyle:
	straight | manhattan | tree
;

enum ArrowDecorator:
	NoDecoration | OutputArrow | InputArrow | OutputClosedArrow | InputClosedArrow | OutputFillClosedArrow | InputFillClosedArrow | Diamond | FillDiamond | InputArrowWithDiamond | InputArrowWithFillDiamond
;

enum FoldingStyle:
	none | source | target
;

enum EndsCentering:
	none | both | source | target
;

Palette:
	(documentation=DOCUMENTATION)?
	'palette' name=ID '{'
		(colors+=Color)*
	'}'
;

Color:
	'color' name=ID '=' value=ColorValue 
;

ColorValue:
	RGB
;

RGB:
	'rgb(' red=INT ',' green=INT ',' blue=INT ')'
;

terminal DOCUMENTATION: '/**' -> '*/';

terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING	: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

terminal EXPRESSION : '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal WS	: (' '|'\t'|'\r'|'\n')+;