/*
 * generated by Xtext
 */
package org.obeonetwork.sirius.text.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.obeonetwork.sirius.text.services.SiriusTextDslGrammarAccess;

@SuppressWarnings("all")
public class SiriusTextDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SiriusTextDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Diagram_MetamodelUrisKeyword_4_p;
	protected AbstractElementAlias match_Diagram___AdditionalLayersKeyword_20_0_EqualsSignKeyword_20_1_LeftSquareBracketKeyword_20_2_RightSquareBracketKeyword_20_4__q;
	protected AbstractElementAlias match_Viewpoint___RepresentationsKeyword_7_0_EqualsSignKeyword_7_1_LeftSquareBracketKeyword_7_2_RightSquareBracketKeyword_7_4__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SiriusTextDslGrammarAccess) access;
		match_Diagram_MetamodelUrisKeyword_4_p = new TokenAlias(true, false, grammarAccess.getDiagramAccess().getMetamodelUrisKeyword_4());
		match_Diagram___AdditionalLayersKeyword_20_0_EqualsSignKeyword_20_1_LeftSquareBracketKeyword_20_2_RightSquareBracketKeyword_20_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDiagramAccess().getAdditionalLayersKeyword_20_0()), new TokenAlias(false, false, grammarAccess.getDiagramAccess().getEqualsSignKeyword_20_1()), new TokenAlias(false, false, grammarAccess.getDiagramAccess().getLeftSquareBracketKeyword_20_2()), new TokenAlias(false, false, grammarAccess.getDiagramAccess().getRightSquareBracketKeyword_20_4()));
		match_Viewpoint___RepresentationsKeyword_7_0_EqualsSignKeyword_7_1_LeftSquareBracketKeyword_7_2_RightSquareBracketKeyword_7_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getViewpointAccess().getRepresentationsKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getViewpointAccess().getEqualsSignKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getViewpointAccess().getLeftSquareBracketKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getViewpointAccess().getRightSquareBracketKeyword_7_4()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Diagram_MetamodelUrisKeyword_4_p.equals(syntax))
				emit_Diagram_MetamodelUrisKeyword_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Diagram___AdditionalLayersKeyword_20_0_EqualsSignKeyword_20_1_LeftSquareBracketKeyword_20_2_RightSquareBracketKeyword_20_4__q.equals(syntax))
				emit_Diagram___AdditionalLayersKeyword_20_0_EqualsSignKeyword_20_1_LeftSquareBracketKeyword_20_2_RightSquareBracketKeyword_20_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Viewpoint___RepresentationsKeyword_7_0_EqualsSignKeyword_7_1_LeftSquareBracketKeyword_7_2_RightSquareBracketKeyword_7_4__q.equals(syntax))
				emit_Viewpoint___RepresentationsKeyword_7_0_EqualsSignKeyword_7_1_LeftSquareBracketKeyword_7_2_RightSquareBracketKeyword_7_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '@MetamodelUris'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '({' metamodelUris+=STRING
	 *     documentation=DOCUMENTATION (ambiguity) '({' metamodelUris+=STRING
	 *     enablePopupBars?='@EnablePopupBars' (ambiguity) '({' metamodelUris+=STRING
	 *     initialized?='@Initialized' (ambiguity) '({' metamodelUris+=STRING
	 *     showOnStartup?='@ShowOnStartup' (ambiguity) '({' metamodelUris+=STRING
	 */
	protected void emit_Diagram_MetamodelUrisKeyword_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('additionalLayers' '=' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     defaultLayer=[Layer|QualifiedName] (ambiguity) '}' (rule end)
	 *     domainClass=STRING '{' (ambiguity) '}' (rule end)
	 *     endUserDocumentation=STRING (ambiguity) '}' (rule end)
	 *     precondition=EXPRESSION '{' (ambiguity) '}' (rule end)
	 *     rootExpression=EXPRESSION (ambiguity) '}' (rule end)
	 *     titleExpression=EXPRESSION (ambiguity) '}' (rule end)
	 */
	protected void emit_Diagram___AdditionalLayersKeyword_20_0_EqualsSignKeyword_20_1_LeftSquareBracketKeyword_20_2_RightSquareBracketKeyword_20_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('representations' '=' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     icon=STRING (ambiguity) '}' (rule end)
	 *     label=STRING '{' (ambiguity) '}' (rule end)
	 *     modelFileExtensions+=STRING ']' (ambiguity) '}' (rule end)
	 *     name=ID '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_Viewpoint___RepresentationsKeyword_7_0_EqualsSignKeyword_7_1_LeftSquareBracketKeyword_7_2_RightSquareBracketKeyword_7_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
